package com.yandexmobileads.rewarded

import com.facebook.react.bridge.Promise
import com.facebook.react.bridge.ReactApplicationContext
import com.facebook.react.bridge.ReactContextBaseJavaModule
import com.facebook.react.bridge.ReactMethod
import com.facebook.react.bridge.ReadableMap
import com.yandex.mobile.ads.common.AdError
import com.yandex.mobile.ads.common.AdRequestError
import com.yandex.mobile.ads.common.ImpressionData
import com.yandex.mobile.ads.rewarded.Reward
import com.yandex.mobile.ads.rewarded.RewardedAd
import com.yandex.mobile.ads.rewarded.RewardedAdEventListener
import com.yandex.mobile.ads.rewarded.RewardedAdLoadListener
import com.yandex.mobile.ads.rewarded.RewardedAdLoader
import com.yandexmobileads.common.Constants
import com.yandexmobileads.common.EventEmitter
import com.yandexmobileads.common.NativeMapFactory
import com.yandexmobileads.common.ObjectStorage
import com.yandexmobileads.common.PluginError
import com.yandexmobileads.common.reject
import com.yandexmobileads.util.mapper.AdErrorMapper
import com.yandexmobileads.util.mapper.AdRequestErrorMapper
import com.yandexmobileads.util.EventNameProvider
import com.yandexmobileads.util.factory.AdRequestConfigurationFactory
import com.yandexmobileads.util.mapper.ImpressionDataMapper
import com.yandexmobileads.util.mapper.RewardMapper
import org.json.JSONObject
import java.util.LinkedList
import java.util.Queue

internal class YandexRewardedAdModule(
    private val context: ReactApplicationContext,
    private val eventEmitter: EventEmitter = EventEmitter(context, NativeMapFactory()),
    private val loadersStorage: ObjectStorage<RewardedAdLoader> = ObjectStorage(),
    private val adsStorage: ObjectStorage<RewardedAd> = ObjectStorage(),
    private val eventNameProvider: EventNameProvider = EventNameProvider(),
    private val adRequestConfigurationFactory: AdRequestConfigurationFactory = AdRequestConfigurationFactory()
) : ReactContextBaseJavaModule(context) {
    private val loadPromises: MutableMap<String, Queue<Promise>> = mutableMapOf()

    override fun getName(): String = NAME

    @ReactMethod
    fun newLoader(promise: Promise) {
        currentActivity?.runOnUiThread {
            val loader = RewardedAdLoader(reactApplicationContext)
            val loaderId = loadersStorage.put(loader)
            loader.setAdLoadListener(RNRewardedAdLoadListener(loaderId))
            promise.resolve(loaderId)
        } ?: promise.reject(PluginError.CurrentActivityIsNull)
    }

    @ReactMethod
    fun loadAd(
        loaderId: String,
        adRequestConfiguration: ReadableMap,
        promise: Promise,
    ) {
        currentActivity?.runOnUiThread {
            val loader = loadersStorage.get(loaderId)
            if (loader == null) {
                promise.reject(PluginError.ObjectNotFound)
                return@runOnUiThread
            }
            val list = this.loadPromises.getOrPut(loaderId) { LinkedList() }
            list.add(promise)
            val nativeAdRequestConfiguration =
                adRequestConfigurationFactory.createFromReadableMap(adRequestConfiguration)
            if (nativeAdRequestConfiguration == null) {
                promise.reject(PluginError.InvalidAdRequestConfigurationError)
                return@runOnUiThread
            }
            loader.loadAd(nativeAdRequestConfiguration)
        } ?: promise.reject(PluginError.CurrentActivityIsNull)
    }

    @ReactMethod
    fun cancelLoading(loaderId: String) {
        loadersStorage.get(loaderId)?.cancelLoading()
        cleanUp(loaderId)
    }

    @ReactMethod
    fun showAd(
        adObjectId: String,
        promise: Promise,
    ) {
        val activity = currentActivity
        if (activity == null) {
            deleteAd(adObjectId)
            promise.reject(PluginError.CurrentActivityIsNull)
            return
        }
        activity.runOnUiThread {
            if (currentActivity == null || currentActivity?.isFinishing == true) {
                deleteAd(adObjectId)
                promise.reject(PluginError.CurrentActivityIsNull)
                return@runOnUiThread
            }
            adsStorage.get(adObjectId)?.show(activity)
        }
    }

    fun deleteAd(id: String) {
        val eventName = eventNameProvider.eventName(
            Constants.AdType.REWARDED,
            Constants.EventName.ON_AD_DELETED
        )
        val eventData = mapOf(Constants.Key.AD_ID to id)
        eventEmitter.emit(eventName, eventData)
        adsStorage.remove(id)
    }

    private fun cleanUp(loaderId: String) {
        loadPromises[loaderId]?.clear()
    }

    inner class RNRewardedAdLoadListener(
        private val loaderId: String,
        private val adRequestErrorMapper: AdRequestErrorMapper = AdRequestErrorMapper(),
    ) : RewardedAdLoadListener {
        override fun onAdFailedToLoad(error: AdRequestError) {
            val message = JSONObject(adRequestErrorMapper.map(error)).toString()
            loadPromises[loaderId]?.poll()?.reject(Constants.Error.CODE_INTERNAL_ERROR, message)
        }

        override fun onAdLoaded(rewarded: RewardedAd) {
            val id = adsStorage.put(rewarded)
            rewarded.setAdEventListener(RNRewardedAdEventListener(id))
            loadPromises[loaderId]?.poll()?.resolve(id)
        }
    }

    inner class RNRewardedAdEventListener(
        private val adId: String,
        private val adErrorMapper: AdErrorMapper = AdErrorMapper(),
        private val impressionDataMapper: ImpressionDataMapper = ImpressionDataMapper(),
        private val rewardMapper: RewardMapper = RewardMapper()
    ) : RewardedAdEventListener {
        override fun onAdShown() {
            val eventName = eventNameProvider.eventName(
                Constants.AdType.REWARDED,
                Constants.EventName.ON_AD_SHOWN
            )
            val eventData = mapOf(Constants.Key.AD_ID to adId)
            eventEmitter.emit(eventName, eventData)
        }

        override fun onAdFailedToShow(adError: AdError) {
            val eventName = eventNameProvider.eventName(
                Constants.AdType.REWARDED,
                Constants.EventName.ON_AD_FAILED_TO_SHOW
            )
            val eventData: MutableMap<String, Any> = mutableMapOf(Constants.Key.AD_ID to adId)
            eventData[Constants.Key.ERROR] = adErrorMapper.map(adError)
            eventEmitter.emit(eventName, eventData)
        }

        override fun onAdDismissed() {
            val eventName = eventNameProvider.eventName(
                Constants.AdType.REWARDED,
                Constants.EventName.ON_AD_DISMISSED
            )
            val eventData = mapOf(Constants.Key.AD_ID to adId)
            eventEmitter.emit(eventName, eventData)
            deleteAd(adId)
        }

        override fun onAdImpression(impressionData: ImpressionData?) {
            val eventName = eventNameProvider.eventName(
                Constants.AdType.REWARDED,
                Constants.EventName.ON_AD_IMPRESSION
            )
            val eventData: MutableMap<String, Any> = mutableMapOf(Constants.Key.AD_ID to adId)
            impressionData?.let { data ->
                eventData[Constants.Key.IMPRESSION_DATA] = impressionDataMapper.map(data)
            }
            eventEmitter.emit(eventName, eventData)
        }

        override fun onAdClicked() {
            val eventName = eventNameProvider.eventName(
                Constants.AdType.REWARDED,
                Constants.EventName.ON_AD_CLICKED
            )
            val eventData = mapOf(Constants.Key.AD_ID to adId)
            eventEmitter.emit(eventName, eventData)
        }

        override fun onRewarded(reward: Reward) {
            val evenName = eventNameProvider.eventName(
                Constants.AdType.REWARDED,
                Constants.EventName.ON_AD_DID_REWARD
            )
            val mappedReward = rewardMapper.map(reward)
            val eventData = mapOf(
                Constants.Key.AD_ID to adId,
                Constants.Key.REWARD to mappedReward
            )
            eventEmitter.emit(evenName, eventData)
        }
    }

    companion object {
        const val NAME = "YandexRewardedAdModule"
    }
}
